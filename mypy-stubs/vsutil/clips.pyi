import vapoursynth as vs
from . import types
from typing import List, Optional, Union

def depth(clip: vs.VideoNode, bitdepth: int, sample_type: Optional[Union[int, vs.SampleType]] = ..., *, range: Optional[Union[int, types.Range]] = ..., range_in: Optional[Union[int, types.Range]] = ..., dither_type: Optional[Union[types.Dither, str]] = ...) -> vs.VideoNode: ...
def frame2clip(frame: vs.VideoFrame, *, enforce_cache: bool = ...) -> vs.VideoNode: ...
def get_y(clip: vs.VideoNode) -> vs.VideoNode: ...
def insert_clip(clip: vs.VideoNode, insert: vs.VideoNode, start_frame: int) -> vs.VideoNode: ...
def join(planes: List[vs.VideoNode], family: vs.ColorFamily = ...) -> vs.VideoNode: ...
def plane(clip: vs.VideoNode, planeno: int) -> vs.VideoNode: ...
def split(clip: vs.VideoNode) -> List[vs.VideoNode]: ...
