import vapoursynth as vs
from typing import Any, Callable, Dict

core: Any

def scradit_mask(luma: vs.VideoNode, b: float = ..., c: float = ..., height: int = ..., absthresh: float = ..., iters: int = ..., descaler: Callable[[vs.VideoNode, Any], vs.VideoNode] = ..., upscaler: Callable[[vs.VideoNode, Any], vs.VideoNode] = ..., dekwargs: Dict = ..., upkwargs: Dict = ...) -> vs.VideoNode: ...
def detail_mask(source: vs.VideoNode, rescaled: vs.VideoNode, thresh: float = ...) -> vs.VideoNode: ...
def dehalo_mask(clip: vs.VideoNode, maskgen: Callable[[vs.VideoNode, Any], vs.VideoNode] = ..., iter_out: int = ..., iter_in: int = ..., inner: bool = ..., outer: bool = ..., **mask_args: Dict[str, Any]) -> vs.VideoNode: ...
def fineline_mask(clip: vs.VideoNode, thresh: int = ...) -> vs.VideoNode: ...
