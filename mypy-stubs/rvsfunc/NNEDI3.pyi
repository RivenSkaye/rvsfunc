import vapoursynth as vs
from .errors import VariableFormatError as VariableFormatError
from .utils import is_topleft as is_topleft
from abc import ABCMeta, abstractmethod
from typing import Any

core: Any

class NNEDI3Base(metaclass=ABCMeta):
    NB: Any
    shift: Any
    kwargs: Any
    def __init__(self, shift: bool = ..., **nnedi_kwargs: Any) -> None: ...
    @abstractmethod
    def nnedi(self, clip: vs.VideoNode, field: int, *args: Any, **kwargs: Any) -> vs.VideoNode: ...
    def double_size(self, clip: vs.VideoNode, chroma: bool = ..., iterations: int = ...) -> vs.VideoNode: ...
    @classmethod
    def rpow2(cls, clip: vs.VideoNode, chroma: bool = ..., iterations: int = ..., shift: bool = ..., **nnedi_kwargs: Any) -> vs.VideoNode: ...

class ZNEDI3(NNEDI3Base):
    def __init__(self, shift: bool = ..., **nnedi_kwargs: Any) -> None: ...
    def nnedi(self, clip: vs.VideoNode, field: int, *args: Any, **kwargs: Any) -> vs.VideoNode: ...

class NNEDI3(NNEDI3Base):
    def __init__(self, shift: bool = ..., **nnedi_kwargs: Any) -> None: ...
    def nnedi(self, clip: vs.VideoNode, field: int, *args: Any, **kwargs: Any) -> vs.VideoNode: ...

class NNEDI3CL(NNEDI3Base):
    def __init__(self, shift: bool = ..., **nnedi_kwargs: Any) -> None: ...
    def nnedi(self, clip: vs.VideoNode, field: int, *args: Any, **kwargs: Any) -> vs.VideoNode: ...
