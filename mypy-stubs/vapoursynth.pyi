from typing import Any, ClassVar, Iterable

from typing import overload
import _abc
import _collections
import collections.abc
import enum
import importlib._bootstrap
import numbers
COMPAT: importlib._bootstrap.ColorFamily
COMPATBGR32: importlib._bootstrap.PresetFormat
COMPATYUY2: importlib._bootstrap.PresetFormat
FLOAT: importlib._bootstrap.SampleType
GRAY: importlib._bootstrap.ColorFamily
GRAY16: importlib._bootstrap.PresetFormat
GRAY8: importlib._bootstrap.PresetFormat
GRAYH: importlib._bootstrap.PresetFormat
GRAYS: importlib._bootstrap.PresetFormat
INTEGER: importlib._bootstrap.SampleType
NONE: importlib._bootstrap.PresetFormat
RGB: importlib._bootstrap.ColorFamily
RGB24: importlib._bootstrap.PresetFormat
RGB27: importlib._bootstrap.PresetFormat
RGB30: importlib._bootstrap.PresetFormat
RGB48: importlib._bootstrap.PresetFormat
RGBH: importlib._bootstrap.PresetFormat
RGBS: importlib._bootstrap.PresetFormat
YCOCG: importlib._bootstrap.ColorFamily
YUV: importlib._bootstrap.ColorFamily
YUV410P8: importlib._bootstrap.PresetFormat
YUV411P8: importlib._bootstrap.PresetFormat
YUV420P10: importlib._bootstrap.PresetFormat
YUV420P12: importlib._bootstrap.PresetFormat
YUV420P14: importlib._bootstrap.PresetFormat
YUV420P16: importlib._bootstrap.PresetFormat
YUV420P8: importlib._bootstrap.PresetFormat
YUV420P9: importlib._bootstrap.PresetFormat
YUV422P10: importlib._bootstrap.PresetFormat
YUV422P12: importlib._bootstrap.PresetFormat
YUV422P14: importlib._bootstrap.PresetFormat
YUV422P16: importlib._bootstrap.PresetFormat
YUV422P8: importlib._bootstrap.PresetFormat
YUV422P9: importlib._bootstrap.PresetFormat
YUV440P8: importlib._bootstrap.PresetFormat
YUV444P10: importlib._bootstrap.PresetFormat
YUV444P12: importlib._bootstrap.PresetFormat
YUV444P14: importlib._bootstrap.PresetFormat
YUV444P16: importlib._bootstrap.PresetFormat
YUV444P8: importlib._bootstrap.PresetFormat
YUV444P9: importlib._bootstrap.PresetFormat
YUV444PH: importlib._bootstrap.PresetFormat
YUV444PS: importlib._bootstrap.PresetFormat
_EMPTY: list
_using_vsscript: bool
core: _CoreProxy
namedtuple: function

class AlphaOutputTuple(tuple):
    _asdict: ClassVar[function] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields: ClassVar[tuple] = ...
    _replace: ClassVar[function] = ...
    alpha: ClassVar[_collections._tuplegetter] = ...
    clip: ClassVar[_collections._tuplegetter] = ...
    __getnewargs__: ClassVar[function] = ...
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _make(self, *args, **kwargs) -> Any: ...

class CallbackData:
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ColorFamily(enum.IntEnum):
    class _member_type_:
        denominator: ClassVar[getset_descriptor] = ...
        imag: ClassVar[getset_descriptor] = ...
        numerator: ClassVar[getset_descriptor] = ...
        real: ClassVar[getset_descriptor] = ...
        @classmethod
        def __init__(self, *args, **kwargs) -> None: ...
        @overload
        def as_integer_ratio() -> Any: ...
        @overload
        def as_integer_ratio() -> Any: ...
        @overload
        def as_integer_ratio() -> Any: ...
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(self, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    COMPAT: ClassVar[importlib._bootstrap.ColorFamily] = ...
    GRAY: ClassVar[importlib._bootstrap.ColorFamily] = ...
    RGB: ClassVar[importlib._bootstrap.ColorFamily] = ...
    YCOCG: ClassVar[importlib._bootstrap.ColorFamily] = ...
    YUV: ClassVar[importlib._bootstrap.ColorFamily] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class Core:
    add_cache: ClassVar[getset_descriptor] = ...
    max_cache_size: ClassVar[getset_descriptor] = ...
    num_threads: ClassVar[getset_descriptor] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_format(self, *args, **kwargs) -> Any: ...
    def get_plugins(self, *args, **kwargs) -> Any: ...
    def list_functions(self, *args, **kwargs) -> Any: ...
    def register_format(self, *args, **kwargs) -> Any: ...
    def set_max_cache_size(self, *args, **kwargs) -> Any: ...
    def version(self, *args, **kwargs) -> Any: ...
    def version_number(self, *args, **kwargs) -> Any: ...
    def __dir__(self) -> Any: ...
    def __getattr__(self, name) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Environment:
    active: ClassVar[getset_descriptor] = ...
    alive: ClassVar[getset_descriptor] = ...
    env: ClassVar[getset_descriptor] = ...
    env_id: ClassVar[getset_descriptor] = ...
    single: ClassVar[getset_descriptor] = ...
    __hash__: ClassVar[None] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def copy(self, *args, **kwargs) -> Any: ...
    @classmethod
    def is_single(self, *args, **kwargs) -> Any: ...
    def use(self, *args, **kwargs) -> Any: ...
    def __enter__(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __exit__(self, type, value, traceback) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class EnvironmentData:
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class EnvironmentPolicy:
    def get_current_environment(self, *args, **kwargs) -> Any: ...
    def is_active(self, *args, **kwargs) -> Any: ...
    def on_policy_cleared(self, *args, **kwargs) -> Any: ...
    def on_policy_registered(self, *args, **kwargs) -> Any: ...
    def set_environment(self, *args, **kwargs) -> Any: ...

class EnvironmentPolicyAPI:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def create_environment(self, *args, **kwargs) -> Any: ...
    def unregister_policy(self, *args, **kwargs) -> Any: ...
    def wrap_environment(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Error(Exception):
    def __init__(self, *args, **kwargs) -> None: ...

class Format:
    bits_per_sample: ClassVar[getset_descriptor] = ...
    bytes_per_sample: ClassVar[getset_descriptor] = ...
    color_family: ClassVar[getset_descriptor] = ...
    id: ClassVar[getset_descriptor] = ...
    name: ClassVar[getset_descriptor] = ...
    num_planes: ClassVar[getset_descriptor] = ...
    sample_type: ClassVar[getset_descriptor] = ...
    subsampling_h: ClassVar[getset_descriptor] = ...
    subsampling_w: ClassVar[getset_descriptor] = ...
    __hash__: ClassVar[None] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _as_dict(self, *args, **kwargs) -> Any: ...
    def replace(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __int__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Fraction(numbers.Rational):
    _abc_impl: ClassVar[_abc._abc_data] = ...
    _add: ClassVar[function] = ...
    _denominator: ClassVar[member_descriptor] = ...
    _div: ClassVar[function] = ...
    _divmod: ClassVar[function] = ...
    _floordiv: ClassVar[function] = ...
    _mod: ClassVar[function] = ...
    _mul: ClassVar[function] = ...
    _numerator: ClassVar[member_descriptor] = ...
    _operator_fallbacks: ClassVar[function] = ...
    _richcmp: ClassVar[function] = ...
    _sub: ClassVar[function] = ...
    as_integer_ratio: ClassVar[function] = ...
    limit_denominator: ClassVar[function] = ...
    __abs__: ClassVar[function] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    __add__: ClassVar[function] = ...
    __bool__: ClassVar[function] = ...
    __ceil__: ClassVar[function] = ...
    __copy__: ClassVar[function] = ...
    __deepcopy__: ClassVar[function] = ...
    __divmod__: ClassVar[function] = ...
    __eq__: ClassVar[function] = ...
    __floor__: ClassVar[function] = ...
    __floordiv__: ClassVar[function] = ...
    __ge__: ClassVar[function] = ...
    __gt__: ClassVar[function] = ...
    __hash__: ClassVar[function] = ...
    __le__: ClassVar[function] = ...
    __lt__: ClassVar[function] = ...
    __mod__: ClassVar[function] = ...
    __mul__: ClassVar[function] = ...
    __neg__: ClassVar[function] = ...
    __pos__: ClassVar[function] = ...
    __pow__: ClassVar[function] = ...
    __radd__: ClassVar[function] = ...
    __rdivmod__: ClassVar[function] = ...
    __reduce__: ClassVar[function] = ...
    __rfloordiv__: ClassVar[function] = ...
    __rmod__: ClassVar[function] = ...
    __rmul__: ClassVar[function] = ...
    __round__: ClassVar[function] = ...
    __rpow__: ClassVar[function] = ...
    __rsub__: ClassVar[function] = ...
    __rtruediv__: ClassVar[function] = ...
    __slots__: ClassVar[tuple] = ...
    __sub__: ClassVar[function] = ...
    __truediv__: ClassVar[function] = ...
    __trunc__: ClassVar[function] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def from_decimal(self, *args, **kwargs) -> Any: ...
    @classmethod
    def from_float(self, *args, **kwargs) -> Any: ...
    @property
    def denominator(self) -> Any: ...
    @property
    def numerator(self) -> Any: ...

class FramePtr:
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Func:
    def __init__(self, *args, **kwargs) -> None: ...
    def __call__(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class FuncData:
    def __init__(self, *args, **kwargs) -> None: ...
    def __call__(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Function:
    name: ClassVar[getset_descriptor] = ...
    plugin: ClassVar[getset_descriptor] = ...
    signature: ClassVar[getset_descriptor] = ...
    __signature__: ClassVar[getset_descriptor] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __call__(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Iterable:
    _abc_impl: ClassVar[_abc._abc_data] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    __iter__: ClassVar[function] = ...
    __slots__: ClassVar[tuple] = ...
    @classmethod
    def __class_getitem__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __subclasshook__(self, *args, **kwargs) -> Any: ...

class Mapping(collections.abc.Collection):
    _abc_impl: ClassVar[_abc._abc_data] = ...
    get: ClassVar[function] = ...
    items: ClassVar[function] = ...
    keys: ClassVar[function] = ...
    values: ClassVar[function] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    __contains__: ClassVar[function] = ...
    __eq__: ClassVar[function] = ...
    __getitem__: ClassVar[function] = ...
    __hash__: ClassVar[None] = ...
    __reversed__: ClassVar[None] = ...
    __slots__: ClassVar[tuple] = ...

class MappingProxyType:
    __hash__: ClassVar[None] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def copy() -> ashallowcopyofD: ...
    def get(self, *args, **kwargs) -> Any: ...
    def items(self, *args, **kwargs) -> Any: ...
    def keys(self, *args, **kwargs) -> Any: ...
    def values(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __class_getitem__(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __ior__(self, other) -> Any: ...
    def __iter__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __or__(self, other) -> Any: ...
    def __reversed__() -> reverseiterator: ...
    def __ror__(self, other) -> Any: ...

class Plugin:
    namespace: ClassVar[getset_descriptor] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_functions(self, *args, **kwargs) -> Any: ...
    def list_functions(self, *args, **kwargs) -> Any: ...
    def __dir__(self) -> Any: ...
    def __getattr__(self, name) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class PresetFormat(enum.IntEnum):
    class _member_type_:
        denominator: ClassVar[getset_descriptor] = ...
        imag: ClassVar[getset_descriptor] = ...
        numerator: ClassVar[getset_descriptor] = ...
        real: ClassVar[getset_descriptor] = ...
        @classmethod
        def __init__(self, *args, **kwargs) -> None: ...
        @overload
        def as_integer_ratio() -> Any: ...
        @overload
        def as_integer_ratio() -> Any: ...
        @overload
        def as_integer_ratio() -> Any: ...
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(self, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    COMPATBGR32: ClassVar[importlib._bootstrap.PresetFormat] = ...
    COMPATYUY2: ClassVar[importlib._bootstrap.PresetFormat] = ...
    GRAY16: ClassVar[importlib._bootstrap.PresetFormat] = ...
    GRAY8: ClassVar[importlib._bootstrap.PresetFormat] = ...
    GRAYH: ClassVar[importlib._bootstrap.PresetFormat] = ...
    GRAYS: ClassVar[importlib._bootstrap.PresetFormat] = ...
    NONE: ClassVar[importlib._bootstrap.PresetFormat] = ...
    RGB24: ClassVar[importlib._bootstrap.PresetFormat] = ...
    RGB27: ClassVar[importlib._bootstrap.PresetFormat] = ...
    RGB30: ClassVar[importlib._bootstrap.PresetFormat] = ...
    RGB48: ClassVar[importlib._bootstrap.PresetFormat] = ...
    RGBH: ClassVar[importlib._bootstrap.PresetFormat] = ...
    RGBS: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV410P8: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV411P8: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV420P10: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV420P12: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV420P14: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV420P16: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV420P8: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV420P9: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV422P10: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV422P12: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV422P14: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV422P16: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV422P8: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV422P9: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV440P8: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV444P10: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV444P12: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV444P14: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV444P16: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV444P8: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV444P9: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV444PH: ClassVar[importlib._bootstrap.PresetFormat] = ...
    YUV444PS: ClassVar[importlib._bootstrap.PresetFormat] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class RawCallbackData:
    def __init__(self, *args, **kwargs) -> None: ...
    def for_future(self, *args, **kwargs) -> Any: ...
    def handle_future(self, *args, **kwargs) -> Any: ...
    def receive(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SampleType(enum.IntEnum):
    class _member_type_:
        denominator: ClassVar[getset_descriptor] = ...
        imag: ClassVar[getset_descriptor] = ...
        numerator: ClassVar[getset_descriptor] = ...
        real: ClassVar[getset_descriptor] = ...
        @classmethod
        def __init__(self, *args, **kwargs) -> None: ...
        @overload
        def as_integer_ratio() -> Any: ...
        @overload
        def as_integer_ratio() -> Any: ...
        @overload
        def as_integer_ratio() -> Any: ...
        def bit_length() -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(self, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...
    __new__: ClassVar[function] = ...
    FLOAT: ClassVar[importlib._bootstrap.SampleType] = ...
    INTEGER: ClassVar[importlib._bootstrap.SampleType] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class StandaloneEnvironmentPolicy:
    def __init__(self, *args, **kwargs) -> None: ...
    def get_current_environment(self, *args, **kwargs) -> Any: ...
    def is_alive(self, *args, **kwargs) -> Any: ...
    def on_policy_cleared(self, *args, **kwargs) -> Any: ...
    def on_policy_registered(self, *args, **kwargs) -> Any: ...
    def set_environment(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ThreadLocal:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class VSScriptEnvironmentPolicy:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_current_environment(self, *args, **kwargs) -> Any: ...
    def is_alive(self, *args, **kwargs) -> Any: ...
    def on_policy_cleared(self, *args, **kwargs) -> Any: ...
    def on_policy_registered(self, *args, **kwargs) -> Any: ...
    def set_environment(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class VideoFrame:
    format: ClassVar[getset_descriptor] = ...
    height: ClassVar[getset_descriptor] = ...
    props: ClassVar[getset_descriptor] = ...
    readonly: ClassVar[getset_descriptor] = ...
    width: ClassVar[getset_descriptor] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def copy(self, *args, **kwargs) -> Any: ...
    def get_read_array(self, *args, **kwargs) -> Any: ...
    def get_read_ptr(self, *args, **kwargs) -> Any: ...
    def get_stride(self, *args, **kwargs) -> Any: ...
    def get_write_array(self, *args, **kwargs) -> Any: ...
    def get_write_ptr(self, *args, **kwargs) -> Any: ...
    def planes(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class VideoNode:
    flags: ClassVar[getset_descriptor] = ...
    format: ClassVar[getset_descriptor] = ...
    fps: ClassVar[getset_descriptor] = ...
    fps_den: ClassVar[getset_descriptor] = ...
    fps_num: ClassVar[getset_descriptor] = ...
    height: ClassVar[getset_descriptor] = ...
    num_frames: ClassVar[getset_descriptor] = ...
    width: ClassVar[getset_descriptor] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def frames(self, *args, **kwargs) -> Any: ...
    def get_frame(self, *args, **kwargs) -> Any: ...
    def get_frame_async(self, *args, **kwargs) -> Any: ...
    def get_frame_async_raw(self, *args, **kwargs) -> Any: ...
    def output(self, *args, **kwargs) -> Any: ...
    def set_output(self, *args, **kwargs) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __dir__(self) -> Any: ...
    def __getattr__(self, name) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __len__(self) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class VideoPlane:
    height: ClassVar[getset_descriptor] = ...
    width: ClassVar[getset_descriptor] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class VideoProps:
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def copy(self, *args, **kwargs) -> Any: ...
    def get(self, *args, **kwargs) -> Any: ...
    def items(self, *args, **kwargs) -> Any: ...
    def keys(self, *args, **kwargs) -> Any: ...
    def pop(self, *args, **kwargs) -> Any: ...
    def popitem(self, *args, **kwargs) -> Any: ...
    def setdefault(self, *args, **kwargs) -> Any: ...
    def update(self, *args, **kwargs) -> Any: ...
    def values(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __dir__(self) -> Any: ...
    def __getattr__(self, name) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _CoreProxy:
    core: ClassVar[getset_descriptor] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __dir__(self) -> Any: ...
    def __getattr__(self, name) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _FastManager:
    def __init__(self, *args, **kwargs) -> None: ...
    def __enter__(self) -> Any: ...
    def __exit__(self, type, value, traceback) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

def Lock() -> Any: ...
def __pyx_unpickle_Enum(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Environment(*args, **kwargs) -> Any: ...
def __pyx_unpickle_EnvironmentData(*args, **kwargs) -> Any: ...
def __pyx_unpickle_EnvironmentPolicyAPI(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Format(*args, **kwargs) -> Any: ...
def __pyx_unpickle_StandaloneEnvironmentPolicy(*args, **kwargs) -> Any: ...
def __pyx_unpickle_VSScriptEnvironmentPolicy(*args, **kwargs) -> Any: ...
def __pyx_unpickle__CoreProxy(*args, **kwargs) -> Any: ...
def __pyx_unpickle__FastManager(*args, **kwargs) -> Any: ...
def __pyx_unpickle___Pyx_EnumMeta(*args, **kwargs) -> Any: ...
def _construct_parameter(*args, **kwargs) -> Any: ...
def _get_core(*args, **kwargs) -> Any: ...
def clear_output(*args, **kwargs) -> Any: ...
def clear_outputs(*args, **kwargs) -> Any: ...
def construct_signature(*args, **kwargs) -> Any: ...
def get_core(*args, **kwargs) -> Any: ...
def get_current_environment(*args, **kwargs) -> Any: ...
def get_output(*args, **kwargs) -> Any: ...
def get_outputs(*args, **kwargs) -> Any: ...
def has_policy(*args, **kwargs) -> Any: ...
def register_policy(*args, **kwargs) -> Any: ...
def set_message_handler(*args, **kwargs) -> Any: ...
def vpy_current_environment(*args, **kwargs) -> Any: ...
